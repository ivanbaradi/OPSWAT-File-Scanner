/*** LIST OF HTTP REQUEST MODULES ***/

//Request Modules
const request = require('request')
//Imports 'output.js'
const _ = require('./output')
//Imports 'request_options.js'
const request_options = require('./request_options')
//Deconstructs every module from 'request_options.js'
const {getHashLookUpOptions, /*getAnalyzeFileOptions, getFetchAnalysisResultsOptions*/} = request_options

/**
 * Produces output after performing hash lookup or fetching analysis results
 * @param filename: name of a file
 * @param body: HTTP Response Body (JSON format)
 */
function produceOutput(filename, body){
    // console.log(body)
    const {scan_results} = body
    if (scan_results) _.output(filename, scan_results)
}


/**
 * Sends a request to perform a hash lookup based on a given file
 * @param api_key: API Key given by OPSWAT
 * @param hash_value: Hash value generated by a given text from a file
 * @param filename: name of a file
 */
function sendHashLookUpHTTPRequest(api_key, hash_value, filename){
    request(getHashLookUpOptions(api_key, hash_value), function (error, response, body) {
        
        if (error) throw new Error(error);
        // console.log(body)

        if(body.error){       
            if(body.error.messages.includes('The hash was not found')){
                console.log('Invalid hash value. Please upload this file at https://metadefender.opswat.com/ and run this program again.' )
                // sendAnalyzeFileHTTPRequest(api_key, filename)
            }
            return
        } 
            
        produceOutput(filename, body)
    });
}

/**
 * Sends a request to analyze a file
 * @param api_key: API Key given by OPSWAT
 * @param filename: name of a file
 */
// function sendAnalyzeFileHTTPRequest(api_key, filename){
//     request(getAnalyzeFileOptions(api_key, filename), function(error, response, body){
//         if (error) throw new Error(error)
//         console.log(body)
//         sendFetchAnalyisResultHTTPRequest(api_key, body.data_id, filename)
//     })
// }

/**
 * Sends a request to fetch analysis results after uploading a file
 * @param api_key: API Key given by OPSWAT 
 * @param dataId: data Id retrieved after uploading a new file
 * @param filename: name of a file
 */
// function sendFetchAnalyisResultHTTPRequest(api_key, dataId, filename){
//     request(getFetchAnalysisResultsOptions(api_key, 0, dataId), function(error, response, body){
//         if (error) throw new Error(error)
//         // console.log(body)
//         produceOutput(filename, body)
//     })
// }

module.exports = {sendHashLookUpHTTPRequest}